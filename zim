#!/bin/bash
#
# Select which zim to run... favoring the latest, local project.
# ...and run the 'prelaunch' script too, while we are at it.
#
# WARNING: still geared for python2 (zim v0.69).
#

LOCAL=$HOME/Projects/zim-desktop-wiki
STOCK=/usr/bin/zim

MYDIR=$(dirname $(realpath $0))
PRELAUNCH=$MYDIR/zim-prelaunch.sh

LOG="$HOME/.local/zim.calls"

# Unusual, but soft, dependencies...
if ! which gxmessage 2> /dev/null
then
	function gxmessage()
	{
		echo "$*"
	}
fi

if ! which pom-notable 2> /dev/null
then
	function pom-notable()
	{
		echo "NB: $*"
	}
fi

# ------------------------------------------------------

LOCK="/tmp/zim-${USER}.lock"
LOCK_DEADLINE=$(date +%s --date="+5minutes")
read BOOT_ID < /proc/sys/kernel/random/boot_id

function _unlock()
{
	rm -rfv "$LOCK"
}

function _maybe_force_lock()
{
	NOW=$(date +%s)
	read LOCK_PID  < "$LOCK/pid"
	read LOCK_WHEN < "$LOCK/when"
	read LOCK_BOOT < "$LOCK/boot_id"

	if [ "$LOCK_BOOT" != "$BOOT_ID" ]
	then
		echo 1>&2 "forcing lock; boot-id mismatch"
		_unlock
	elif [ "$NOW" -gt "$LOCK_DEADLINE" ]
	then
		echo 1>&2 "forcing lock; stale"
		_unlock
	fi
}

function _lock()
{
	while ! mkdir "$LOCK"
	do
		SECONDS="$((1 + RANDOM % 5)).$((RANDOM % 1000))"
		sleep "$SECONDS"
		_maybe_force_lock
	done
	echo "$$" > "$LOCK/pid"
	date +%s > "$LOCK/when"
	echo "$BOOT_ID" > "$LOCK/boot_id"
}
_lock

# ------------------------------------------------------

# BEFORE WE DO ANYTHING... in case we... or zim... or python... or the distro... or the kernel
# MESS SOMETHING UP, let us make sure we AT LEAST preserve WHAT WAS GOING TO BE LOGGED into zim!
echo -e "$(date +%s)\tzim $*" >> $LOG

# If we prioritize ourself, then our children will run at the higher nice level too.
# But if sudo blocks for input, on the gui... then we are stuck.
#sudo renice -n -15 -p $$

# KDE-only? https://github.com/zim-desktop-wiki/zim-desktop-wiki/issues/580
export LC_ALL=C

function debug()
{
	echo 1>&2 "debug: $*"
}

function warning()
{
	echo 1>&2 "warning: $*"
}

# NB: duplicated in ~/etc/cron.*/zim-commit.sh
function zim_is_running()
{
	ZIM_PROCESS=$(pgrep -f /usr/bin/zim)
	if [ -z "$ZIM_PROCESS" ]
	then
		ZIM_PROCESS=$(pgrep -f wiki/zim.py)
		test -n "$ZIM_PROCESS"
	fi
}

function start_sidekick()
{
	debug start_sidekick
	local LOG=/tmp/zim-sidekick.log
	SIDEKICK="$(which zim-sidekick-loop)" 2> /dev/null

	if [ -n "$SIDEKICK" ]
	then
		# Should it have it's own log?
		( cd / ; exec "$SIDEKICK" >> $LOG 2>&1 ) &
		SIDEKICK_PID="$!"
		debug sidekick pid "$SIDEKICK_PID"
	else
		debug "sidekick not found"
	fi
}

function stop_sidekick()
{
	debug stop_sidekick
	local PID="${SIDEKICK_PID:-}"

	if [ -d /proc/$PID ]
	then
		kill "$PID"
	else
		debug "sidekick might have forked, pid $PID not found..."
		pkill -f zim-sidekick-loop
	fi
}

#set -vx

SOCKET=$(find /tmp/zim-$USER -type s)

# If there are no arguments given, then assume it is a GUI launch
# so merge any stray branches and inject a "--debug" argument.
if [ $# -eq 0 ]
then
	debug "no arguments given -> GUI_LAUNCH"

	# If we are launching the gui, make sure there are no other guis running.
	# NB: This is done *before* prelaunch b/c prelaunch will utterly destroy the running zim's /tmp/zim-$USER directory.
	# NB: But by some logic, this should be done *after* prelaunch merge b/c git has its own locking & b/c it lets us be a bit sloppy (no lock file).
	if zim_is_running
	then
		gxmessage -print -title Error 'Zim seems to be running already (might pop up in just a minute).'
		exit 1
	fi

	if [ -n "$SOCKET" ]
	then
		#gxmessage -print -title Error 'Zim socket is present, but not running?'
		#exit 1
		rm -fv "$SOCKET"
		SOCKET=""
	fi

	# NB: The pre-launch merge usually brings in a 'flip-flop-change'... so it must be done before claiming that mutex.
	if [ -x "$PRELAUNCH" ]
	then
		debug "activating prelaunch"
		$PRELAUNCH
		debug "prelaunch complete"
	else
		debug "$PRELAUNCH: dne"
	fi

	GUI_LAUNCH=true
	set -- --debug
else
	GUI_LAUNCH=""

	TIMES=0
	while [ -z "$SOCKET" ]
	do
		debug "non-gui zim call without a socket waiting for zim to activate"

		sleep 20
		let TIMES=TIMES+1

		if zim_is_running
		then
			SOCKET=$(find /tmp/zim-$USER -type s)
		else
			warning "non-gui zim call without main zim process present"
			break
		fi

		if [ "$TIMES" -gt "3" ]
		then
			warning "waited too long for zim to come alive"
			break
		fi
	done
fi

# At this point, one of two things *should* usually be true. Either:
# (1) we are called as 'zim' (no args) and there is no socket, or
# (2) we are called as 'zim ...' (with args) and there is a socket to the main zim instance.

#if [ -n "$SOCKET" ]
if [ -z "$GUI_LAUNCH" ]
then
	debug "non-gui launch"

	# Make sure we don't lose the socket
	if [ -d "$LOCAL" ]
	then
		#echo 1>&2 "using $LOCAL"
		export PYTHONOPTIMIZE=2
		export PYTHONPATH="$LOCAL"
		$LOCAL/zim.py "$@"
	else
		warning "using stock zim: $STOCK"
		"$STOCK" "$@"
	fi

	SOCKET2=$(find /tmp/zim-$USER -type s)
	if [ -z "$SOCKET2" ]
	then
		if [ -z "$SOCKET" ]
		then
			echo 1>&2 "NOTICE: still don't have a socket... okay..."
		else
			echo 1>&2 "WARNING: socket vanished: $SOCKET"
			pom-notable "[[:Zim:Socket:Vanish]] (noticed after non-gui/background zim call)"

			# YES... this is *VERY* aggressive, but I often find that in this state a normal TERM does not suffice,
			# AND... 'zim' is called very frequently, so I don't want to TERM, sleep, KILL...
			# FURTHER... it is almost SURELY *THIS*CALL* (that we just made above) that eradicated the socket, so this
			# is "failing fast".
			pkill -9 zim.py       || echo "no zim.py to kill"
			pkill -9 /usr/bin/zim || echo "no /usr/bin/zim to kill"
			# It is expected that the user will manually restart zim.
		fi
	fi

	_unlock
else
	debug "gui launch requested"
	sleep 1

	# We should not have zim running w/o a socket... but can we tell the difference between the server & client processes?
	# If we leave it running, then we will have a bunch of ugly race conditions.
	if zim_is_running
	then
		echo 1>&2 "WARNING: socket vanished: $SOCKET"
		pom-notable "[[:Zim:Socket:Vanish]] (requested zim gui launch noticed pre-existing zim gui thread running without a control socket)"
		pgrep -f 'zim.py --debug' | xargs kill -9 || echo "could not kill -9 zim development server?"
		pgrep -f 'zim --debug' | xargs kill -9 || echo "could not kill -9 zim stock server?"
	fi

	# !!!: NB: What we are trying to do here is "UNLOCK" other zim calls only after the main zim process is ready to recieve
	# RPC calls (b/c a long zim start time can cause those to time out).
	( sleep 120 && _unlock ) &

	if [ -d "$LOCAL" ]
	then
		#echo 1>&2 "using $LOCAL"
		export PYTHONOPTIMIZE=2
		export PYTHONPATH="$LOCAL"
		# Pardon the no-op slide... :-/
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		start_sidekick
		$LOCAL/zim.py "$@"
		stop_sidekick
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
	else
		echo 1>&2 "WARNING: using $STOCK"
		sleep 5
		# Pardon the no-op slide... :-/
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		start_sidekick
		"$STOCK" "$@"
		stop_sidekick
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
		#########################################################################################################################
	fi

	SOCKET2=$(find /tmp/zim-$USER -type s)
	if [ -n "$SOCKET2" ]
	then
		pom-notable "zim: gui launch returned but socket lingers?"
	fi
fi



